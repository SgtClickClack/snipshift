name: Continuous Integration

on:
  push:
    branches: [main, develop]
    paths:
      - 'api/**'
      - 'web/**'
      - 'mobile/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'api/**'
      - 'web/**'
      - 'mobile/**'

jobs:
  # API Testing and Quality Checks
  api:
    name: API Tests & Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./api/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage/lcov.info
          flags: api
          name: API Coverage
          fail_ci_if_error: false

  # Web App Testing and Quality Checks
  web:
    name: Web Tests & Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:4000/graphql
          NEXT_PUBLIC_ENVIRONMENT: test

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:4000/graphql
          NEXT_PUBLIC_ENVIRONMENT: production

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./web/coverage/lcov.info
          flags: web
          name: Web Coverage
          fail_ci_if_error: false

  # Mobile App Quality Checks
  mobile:
    name: Mobile Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./mobile/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type checking
        run: npm run typecheck

      - name: Run tests
        run: npm run test
        env:
          NODE_ENV: test

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: false
          tags: snipshift-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: false
          tags: snipshift-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
