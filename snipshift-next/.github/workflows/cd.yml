name: Continuous Deployment

on:
  push:
    branches: [main]
    paths:
      - 'api/**'
      - 'web/**'
      - 'mobile/**'
      - 'docker-compose.yml'
      - '.github/workflows/cd.yml'
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main]
    types:
      - completed

jobs:
  # Build and Push Docker Images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging (Fly.io)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy API to Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          args: "deploy ./api --remote-only --build-arg GIT_SHA=${{ github.sha }}"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy Web to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod=false'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          working-directory: ./web

  # Deploy to Production (Manual Trigger)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    concurrency: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy API to Fly.io (Production)
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          args: "deploy ./api --remote-only --build-arg GIT_SHA=${{ github.sha }}"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_PROD }}

      - name: Deploy Web to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN_PROD }}
          vercel-args: '--prod=true'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID_PROD}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PROD}}
          working-directory: ./web

  # Database Migration (if needed)
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./api/package-lock.json

      - name: Install dependencies
        working-directory: ./api
        run: npm ci

      - name: Generate Prisma client and run migrations
        working-directory: ./api
        run: |
          npm run db:generate
          npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, migrate-database]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Wait for API to be ready
        run: |
          for i in {1..30}; do
            if curl -f -s http://your-api-endpoint/health > /dev/null; then
              echo "API is healthy"
              exit 0
            fi
            echo "Waiting for API to be ready... ($i/30)"
            sleep 10
          done
          echo "API failed to become healthy"
          exit 1

      - name: Wait for Web to be ready
        run: |
          for i in {1..30}; do
            if curl -f -s http://your-web-endpoint/api/health > /dev/null; then
              echo "Web is healthy"
              exit 0
            fi
            echo "Waiting for Web to be ready... ($i/30)"
            sleep 10
          done
          echo "Web failed to become healthy"
          exit 1

  # Notification
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, health-check]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Send success notification
        if: needs.deploy-production.result == 'success' && needs.health-check.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ SnipShift successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå SnipShift deployment failed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
