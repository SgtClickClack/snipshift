# Production Docker Compose Configuration
# This file is used for production deployments

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: snipshift-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: snipshift
      POSTGRES_USER: snipshift
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - snipshift-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snipshift -d snipshift"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: snipshift-redis-prod
    restart: unless-stopped
    volumes:
      - redis_prod_data:/data
    networks:
      - snipshift-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GraphQL API - Production
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: snipshift-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://snipshift:${POSTGRES_PASSWORD}@postgres:5432/snipshift
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      SESSION_SECRET: ${SESSION_SECRET}
      LOG_LEVEL: info
      # Add production-specific environment variables
      GOOGLE_CLOUD_PROJECT_ID: ${GOOGLE_CLOUD_PROJECT_ID}
      GOOGLE_CLOUD_STORAGE_BUCKET: ${GOOGLE_CLOUD_STORAGE_BUCKET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - snipshift-prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Use production start command
    command: ["node", "dist/index.js"]

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  snipshift-prod:
    driver: bridge
