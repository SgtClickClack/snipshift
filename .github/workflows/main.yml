name: Snipshift CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npm run check
    
    - name: Build application
      run: npm run build
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Free port 5000 (if any)
      run: npx kill-port 5000 || true

    - name: Start server
      run: |
        npm start &
        npx wait-on http://localhost:5000 --timeout 60000
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        E2E_TEST: '1'
        E2E_TEST_KEY: 'test'
        VITE_E2E: '1'
    
    - name: Run Playwright E2E tests
      run: npx playwright test
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
        E2E_TEST: '1'
        E2E_TEST_KEY: 'test'
        VITE_E2E: '1'
        PW_NO_SERVER: '1'
    
    - name: Install Cypress dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3-dev libxss1 libasound2-dev libxtst6 xauth xvfb
    
    - name: Run Cypress E2E tests
      run: npx cypress run --headless
      env:
        CYPRESS_baseUrl: http://localhost:5000
    
    - name: Upload Playwright test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report-${{ matrix.node-version }}
        path: playwright-report/
        retention-days: 30
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots-${{ matrix.node-version }}
        path: cypress/screenshots/
        retention-days: 30
    
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-videos-${{ matrix.node-version }}
        path: cypress/videos/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit (non-blocking)
      run: npm audit --audit-level moderate || true
    
    - name: Check for vulnerabilities (non-blocking)
      run: npx audit-ci --moderate || true

  deploy-staging:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for staging
      run: npm run build
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Deploy to staging (mock)
      run: |
        echo "üöÄ Deploying Snipshift to staging environment..."
        echo "‚úÖ Build artifacts ready for staging deployment"
        echo "üìä Build size: $(du -sh dist/ | cut -f1)"
        echo "üîó Staging URL would be: https://staging.snipshift.com.au"

  deploy-production:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Run production build validation
      run: |
        echo "üîç Validating production build..."
        if [ ! -d "dist" ]; then
          echo "‚ùå Production build failed - dist directory not found"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Production build failed - index.html not found"
          exit 1
        fi
        echo "‚úÖ Production build validation passed"
    
    - name: Deploy to production (mock)
      run: |
        echo "üöÄ Deploying Snipshift to production environment..."
        echo "‚úÖ Build artifacts ready for production deployment"
        echo "üìä Build size: $(du -sh dist/ | cut -f1)"
        echo "üîó Production URL: https://snipshift.com.au"
        echo "üéâ Snipshift deployment complete!"

  notify:
    needs: [deploy-production, deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "‚úÖ Production deployment successful!"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "‚úÖ Staging deployment successful!"
        else
          echo "‚ö†Ô∏è Deployment completed with status: ${{ needs.deploy-production.result }} / ${{ needs.deploy-staging.result }}"
        fi